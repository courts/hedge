# Simple and incomplete HTTP request parser.
#
# This software is licensed under the Creative
# Commons CC0 1.0 Universal License.
# To view a copy of this license, visit
# http://creativecommons.org/publicdomain/zero/1.0/legalcode
#
# @author Patrick Hof

require 'polyglot'
require 'treetop'

require 'hedge/urlencode.tt'

grammar HedgeReq

  rule request
    req:req delimiter h:headers delimiter b:body
    {
      def content
        res = req.content
        res[:headers] = h.content
        res[:body] = b.content
        unless res[:body].empty?
          ctype = res[:headers]["Content-Type"]
          if ctype = 'application/x-www-form-urlencoded'
            parser = UrlEncodeParser.new
            res[:body_hash] = parser.parse(res[:body]).content
          end
        end
        return res
      end
    }
  end

  rule req 
    verb:verb space url:url space ver:version
    {
      def content
        req = {
          :verb    => verb.text_value,
          :url     => url.text_value,
          :version => ver.text_value
        }
      end
    }
  end

  rule verb
    'GET' / 'POST' / 'PUT' / 'DELETE' / 'HEAD' / 'OPTIONS' / 'TRACE' / 'CONNECT' / 'PATCH'
  end

  rule url
    [a-zA-Z0-9/%:.]
  end

  rule version
    'HTTP/1.0' / 'HTTP/1.1'
  end

  rule headers
    header*
    {
      def content
        h = {}
        elements.each do |el|
          elc = el.content
          h[elc[0]] = elc[1]
        end
        h
      end
    }
  end

  rule header
    key:h_key ':' space val:h_val delimiter
    {
      def content
        [key.text_value, val.text_value]
      end
    }
  end

  rule h_key
    [a-zA-Z0-9\-]+
  end

  rule h_val
    (!"\r" !"\n" .)*
  end

  rule body
    .*
    {
      def content
        return text_value.chomp
      end
    }
  end

  rule delimiter
   "\n" / "\r\n"
  end

  rule space
    [ \t]+
  end

end
